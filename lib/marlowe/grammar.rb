# Autogenerated from a Treetop grammar. Edits may be lost.


# vim: filetype=treetop

module Marlowe

module Grammar
  include Treetop::Runtime

  def root
    @root ||= :all
  end

  module All0
    def classes
      [toplevel] # elements
    end
  end

  def _nt_all
    start_index = index
    if node_cache[:all].has_key?(index)
      cached = node_cache[:all][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_toplevel
    r0.extend(All0)

    node_cache[:all][start_index] = r0

    r0
  end

  def _nt_toplevel
    start_index = index
    if node_cache[:toplevel].has_key?(index)
      cached = node_cache[:toplevel][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_class_start

    node_cache[:toplevel][start_index] = r0

    r0
  end

  module ClassStart0
    def xspace
      elements[1]
    end

    def class_name
      elements[2]
    end

    def _type_params
      elements[3]
    end

    def stmt_end1
      elements[4]
    end

    def stmt_end2
      elements[7]
    end

  end

  def _nt_class_start
    start_index = index
    if node_cache[:class_start].has_key?(index)
      cached = node_cache[:class_start][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('class', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('class')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_xspace
      s0 << r2
      if r2
        r3 = _nt_class_name
        s0 << r3
        if r3
          r5 = _nt_type_params
          if r5
            r4 = r5
          else
            r4 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r4
          if r4
            r6 = _nt_stmt_end
            s0 << r6
            if r6
              r8 = _nt_space
              if r8
                r7 = r8
              else
                r7 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r7
              if r7
                if has_terminal?('end', false, index)
                  r9 = instantiate_node(SyntaxNode,input, index...(index + 3))
                  @index += 3
                else
                  terminal_parse_failure('end')
                  r9 = nil
                end
                s0 << r9
                if r9
                  r10 = _nt_stmt_end
                  s0 << r10
                  if r10
                    s11, i11 = [], index
                    loop do
                      r12 = _nt_white
                      if r12
                        s11 << r12
                      else
                        break
                      end
                    end
                    r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                    s0 << r11
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(ClassDeclaration,input, i0...index, s0)
      r0.extend(ClassStart0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:class_start][start_index] = r0

    r0
  end

  module ClassName0
  end

  def _nt_class_name
    start_index = index
    if node_cache[:class_name].has_key?(index)
      cached = node_cache[:class_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_alnum
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ClassName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:class_name][start_index] = r0

    r0
  end

  module ClassBody0
    def space
      elements[0]
    end

    def declaration
      elements[1]
    end
  end

  module ClassBody1
    def head
      elements[0]
    end

    def tail
      elements[1]
    end
  end

  module ClassBody2
    def declarations
      [head] + tail
    end

    def tail
      super.elements.map { |elt| elt.declaration }
    end
  end

  def _nt_class_body
    start_index = index
    if node_cache[:class_body].has_key?(index)
      cached = node_cache[:class_body][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_declaration
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_space
        s3 << r4
        if r4
          r5 = _nt_declaration
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ClassBody0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ClassBody1)
      r0.extend(ClassBody2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:class_body][start_index] = r0

    r0
  end

  module TypeParams0
    def type_param
      elements[3]
    end
  end

  module TypeParams1
    def type_param
      elements[2]
    end

    def more
      elements[3]
    end

  end

  def _nt_type_params
    start_index = index
    if node_cache[:type_params].has_key?(index)
      cached = node_cache[:type_params][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('[', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('[')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_xspace
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_type_param
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            i6, s6 = index, []
            s7, i7 = [], index
            loop do
              r8 = _nt_xspace
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s6 << r7
            if r7
              if has_terminal?(',', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(',')
                r9 = nil
              end
              s6 << r9
              if r9
                s10, i10 = [], index
                loop do
                  r11 = _nt_xspace
                  if r11
                    s10 << r11
                  else
                    break
                  end
                end
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                s6 << r10
                if r10
                  r12 = _nt_type_param
                  s6 << r12
                end
              end
            end
            if s6.last
              r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
              r6.extend(TypeParams0)
            else
              @index = i6
              r6 = nil
            end
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            s13, i13 = [], index
            loop do
              r14 = _nt_xspace
              if r14
                s13 << r14
              else
                break
              end
            end
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
            s0 << r13
            if r13
              if has_terminal?(']', false, index)
                r15 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r15 = nil
              end
              s0 << r15
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(TypeParams,input, i0...index, s0)
      r0.extend(TypeParams1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_params][start_index] = r0

    r0
  end

  def _nt_type_param
    start_index = index
    if node_cache[:type_param].has_key?(index)
      cached = node_cache[:type_param][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_restricted_type
    if r1
      r0 = r1
    else
      r2 = _nt_type_name
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:type_param][start_index] = r0

    r0
  end

  module RestrictedType0
    def class_name
      elements[0]
    end

    def type_name
      elements[4]
    end
  end

  def _nt_restricted_type
    start_index = index
    if node_cache[:restricted_type].has_key?(index)
      cached = node_cache[:restricted_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_class_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_xspace
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?(':', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_xspace
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_type_name
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(RestrictedType,input, i0...index, s0)
      r0.extend(RestrictedType0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:restricted_type][start_index] = r0

    r0
  end

  def _nt_declaration
    start_index = index
    if node_cache[:declaration].has_key?(index)
      cached = node_cache[:declaration][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_defn
    if r1
      r0 = r1
    else
      r2 = _nt_type_alias
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:declaration][start_index] = r0

    r0
  end

  module TypeAlias0
    def type_name
      elements[2]
    end

    def named_type
      elements[6]
    end

    def stmt_end
      elements[7]
    end

  end

  def _nt_type_alias
    start_index = index
    if node_cache[:type_alias].has_key?(index)
      cached = node_cache[:type_alias][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('type', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('type')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_xspace
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_type_name
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_xspace
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if has_terminal?('=', false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure('=')
              r7 = nil
            end
            s0 << r7
            if r7
              s8, i8 = [], index
              loop do
                r9 = _nt_xspace
                if r9
                  s8 << r9
                else
                  break
                end
              end
              r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
              s0 << r8
              if r8
                r10 = _nt_named_type
                s0 << r10
                if r10
                  r11 = _nt_stmt_end
                  s0 << r11
                  if r11
                    s12, i12 = [], index
                    loop do
                      r13 = _nt_xspace
                      if r13
                        s12 << r13
                      else
                        break
                      end
                    end
                    r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
                    s0 << r12
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(TypeAlias,input, i0...index, s0)
      r0.extend(TypeAlias0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_alias][start_index] = r0

    r0
  end

  def _nt_named_type
    start_index = index
    if node_cache[:named_type].has_key?(index)
      cached = node_cache[:named_type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_type_instantiate
    if r1
      r0 = r1
    else
      r2 = _nt_type_name
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:named_type][start_index] = r0

    r0
  end

  module TypeInstantiate0
    def type_name
      elements[0]
    end

    def type_params
      elements[1]
    end
  end

  def _nt_type_instantiate
    start_index = index
    if node_cache[:type_instantiate].has_key?(index)
      cached = node_cache[:type_instantiate][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type_name
    s0 << r1
    if r1
      r2 = _nt_type_params
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(TypeInstantiate,input, i0...index, s0)
      r0.extend(TypeInstantiate0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_instantiate][start_index] = r0

    r0
  end

  module Defn0
    def single
      elements[2]
    end

    def defn_name
      elements[3]
    end

    def args
      elements[4]
    end

    def stmt_end1
      elements[5]
    end

    def body
      elements[7]
    end

    def stmt_end2
      elements[10]
    end

  end

  def _nt_defn
    start_index = index
    if node_cache[:defn].has_key?(index)
      cached = node_cache[:defn][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('def', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('def')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_xspace
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?('self.', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('self.')
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r6 = _nt_defn_name
          s0 << r6
          if r6
            r8 = _nt_defn_args
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r7
            if r7
              r9 = _nt_stmt_end
              s0 << r9
              if r9
                r11 = _nt_space
                if r11
                  r10 = r11
                else
                  r10 = instantiate_node(SyntaxNode,input, index...index)
                end
                s0 << r10
                if r10
                  r13 = _nt_expression_list
                  if r13
                    r12 = r13
                  else
                    r12 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r12
                  if r12
                    r15 = _nt_space
                    if r15
                      r14 = r15
                    else
                      r14 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s0 << r14
                    if r14
                      if has_terminal?('end', false, index)
                        r16 = instantiate_node(SyntaxNode,input, index...(index + 3))
                        @index += 3
                      else
                        terminal_parse_failure('end')
                        r16 = nil
                      end
                      s0 << r16
                      if r16
                        r17 = _nt_stmt_end
                        s0 << r17
                        if r17
                          s18, i18 = [], index
                          loop do
                            r19 = _nt_xspace
                            if r19
                              s18 << r19
                            else
                              break
                            end
                          end
                          r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                          s0 << r18
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(DefineMethod,input, i0...index, s0)
      r0.extend(Defn0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:defn][start_index] = r0

    r0
  end

  module DefnName0
  end

  def _nt_defn_name
    start_index = index
    if node_cache[:defn_name].has_key?(index)
      cached = node_cache[:defn_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[A-Za-z]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[A-Za-z0-9_]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DefnName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:defn_name][start_index] = r0

    r0
  end

  module DefnArgs0
    def defn_arg_list
      elements[1]
    end

  end

  def _nt_defn_args
    start_index = index
    if node_cache[:defn_args].has_key?(index)
      cached = node_cache[:defn_args][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_defn_arg_list
      s0 << r2
      if r2
        if has_terminal?(')', false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(')')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(Arguments,input, i0...index, s0)
      r0.extend(DefnArgs0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:defn_args][start_index] = r0

    r0
  end

  module DefnArgList0
    def typed_identifier
      elements[3]
    end
  end

  module DefnArgList1
    def head
      elements[0]
    end

    def tail
      elements[1]
    end
  end

  module DefnArgList2
    def declarations
      [head] + tail
    end

    def tail
      super.elements.map { |elt| elt.typed_identifier }
    end
  end

  def _nt_defn_arg_list
    start_index = index
    if node_cache[:defn_arg_list].has_key?(index)
      cached = node_cache[:defn_arg_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_typed_identifier
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        s4, i4 = [], index
        loop do
          r5 = _nt_white
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_white
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s3 << r7
            if r7
              r9 = _nt_typed_identifier
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(DefnArgList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DefnArgList1)
      r0.extend(DefnArgList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:defn_arg_list][start_index] = r0

    r0
  end

  module TypedIdentifier0
    def defn_name
      elements[0]
    end

    def type_name
      elements[4]
    end
  end

  def _nt_typed_identifier
    start_index = index
    if node_cache[:typed_identifier].has_key?(index)
      cached = node_cache[:typed_identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_defn_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_white
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?(':', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(':')
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_white
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_type_name
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(TypedIdentifier,input, i0...index, s0)
      r0.extend(TypedIdentifier0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:typed_identifier][start_index] = r0

    r0
  end

  module TypeName0
    def identifier
      elements[0]
    end

  end

  module TypeName1
  end

  module TypeName2
    def scope
      elements[0]
    end

    def name
      elements[1]
    end
  end

  def _nt_type_name
    start_index = index
    if node_cache[:type_name].has_key?(index)
      cached = node_cache[:type_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    r3 = _nt_identifier
    s2 << r3
    if r3
      if has_terminal?('::', false, index)
        r4 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('::')
        r4 = nil
      end
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(TypeName0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      i5, s5 = index, []
      s6, i6 = [], index
      loop do
        if has_terminal?('\G[A-Za-z0-9_]', true, index)
          r7 = true
          @index += 1
        else
          r7 = nil
        end
        if r7
          s6 << r7
        else
          break
        end
      end
      if s6.empty?
        @index = i6
        r6 = nil
      else
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      end
      s5 << r6
      if r6
        s8, i8 = [], index
        loop do
          if has_terminal?("*", false, index)
            r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("*")
            r9 = nil
          end
          if r9
            s8 << r9
          else
            break
          end
        end
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        s5 << r8
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(TypeName1)
      else
        @index = i5
        r5 = nil
      end
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(TypeName,input, i0...index, s0)
      r0.extend(TypeName2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_name][start_index] = r0

    r0
  end

  module ExpressionList0
    def space
      elements[0]
    end

    def expression
      elements[1]
    end
  end

  module ExpressionList1
    def head
      elements[0]
    end

    def tail
      elements[1]
    end
  end

  module ExpressionList2
    def expressions
      [head] + tail
    end

    def tail
      super.elements.map { |elt| elt.expression }
    end
  end

  def _nt_expression_list
    start_index = index
    if node_cache[:expression_list].has_key?(index)
      cached = node_cache[:expression_list][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_space
        s3 << r4
        if r4
          r5 = _nt_expression
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ExpressionList0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ExpressionList1)
      r0.extend(ExpressionList2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expression_list][start_index] = r0

    r0
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_comparison

    node_cache[:expression][start_index] = r0

    r0
  end

  module Comparison0
    def lhs
      elements[0]
    end

    def space1
      elements[1]
    end

    def operator
      elements[2]
    end

    def space2
      elements[3]
    end

    def rhs
      elements[4]
    end
  end

  def _nt_comparison
    start_index = index
    if node_cache[:comparison].has_key?(index)
      cached = node_cache[:comparison][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_additive
    s1 << r2
    if r2
      r3 = _nt_space
      s1 << r3
      if r3
        r4 = _nt_compare_op
        s1 << r4
        if r4
          r5 = _nt_space
          s1 << r5
          if r5
            r6 = _nt_comparison
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(ComparisonOperation,input, i1...index, s1)
      r1.extend(Comparison0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r7 = _nt_additive
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:comparison][start_index] = r0

    r0
  end

  def _nt_compare_op
    start_index = index
    if node_cache[:compare_op].has_key?(index)
      cached = node_cache[:compare_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("==", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("==")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("===", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure("===")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?(">", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(">")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("<", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("<")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:compare_op][start_index] = r0

    r0
  end

  module Additive0
    def lhs
      elements[0]
    end

    def space1
      elements[1]
    end

    def operator
      elements[2]
    end

    def space2
      elements[3]
    end

    def rhs
      elements[4]
    end
  end

  def _nt_additive
    start_index = index
    if node_cache[:additive].has_key?(index)
      cached = node_cache[:additive][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_multitive
    s1 << r2
    if r2
      r3 = _nt_space
      s1 << r3
      if r3
        r4 = _nt_add_op
        s1 << r4
        if r4
          r5 = _nt_space
          s1 << r5
          if r5
            r6 = _nt_additive
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(AdditiveOperation,input, i1...index, s1)
      r1.extend(Additive0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r7 = _nt_multitive
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:additive][start_index] = r0

    r0
  end

  def _nt_add_op
    start_index = index
    if node_cache[:add_op].has_key?(index)
      cached = node_cache[:add_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("+", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("+")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("-", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("-")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:add_op][start_index] = r0

    r0
  end

  module Multitive0
    def lhs
      elements[0]
    end

    def space1
      elements[1]
    end

    def operator
      elements[2]
    end

    def space2
      elements[3]
    end

    def rhs
      elements[4]
    end
  end

  def _nt_multitive
    start_index = index
    if node_cache[:multitive].has_key?(index)
      cached = node_cache[:multitive][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_aref
    s1 << r2
    if r2
      r3 = _nt_space
      s1 << r3
      if r3
        r4 = _nt_add_op
        s1 << r4
        if r4
          r5 = _nt_space
          s1 << r5
          if r5
            r6 = _nt_multitive
            s1 << r6
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(MultitiveOperation,input, i1...index, s1)
      r1.extend(Multitive0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r7 = _nt_aref
      if r7
        r0 = r7
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:multitive][start_index] = r0

    r0
  end

  def _nt_multitive_op
    start_index = index
    if node_cache[:multitive_op].has_key?(index)
      cached = node_cache[:multitive_op][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("*", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("*")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("/", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("/")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:multitive_op][start_index] = r0

    r0
  end

  module Aref0
    def recv
      elements[0]
    end

    def index
      elements[3]
    end

  end

  def _nt_aref
    start_index = index
    if node_cache[:aref].has_key?(index)
      cached = node_cache[:aref][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_aref_recv
    s1 << r2
    if r2
      if has_terminal?('[', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r3 = nil
      end
      s1 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
        if r4
          r6 = _nt_expression
          s1 << r6
          if r6
            r8 = _nt_space
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r7
            if r7
              if has_terminal?(']', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r9 = nil
              end
              s1 << r9
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(ArefOperator,input, i1...index, s1)
      r1.extend(Aref0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r10 = _nt_sub_expression1
      if r10
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:aref][start_index] = r0

    r0
  end

  def _nt_aref_recv
    start_index = index
    if node_cache[:aref_recv].has_key?(index)
      cached = node_cache[:aref_recv][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_function_call
    if r1
      r0 = r1
    else
      r2 = _nt_scoped_function_call
      if r2
        r0 = r2
      else
        r3 = _nt_primary
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:aref_recv][start_index] = r0

    r0
  end

  def _nt_sub_expression1
    start_index = index
    if node_cache[:sub_expression1].has_key?(index)
      cached = node_cache[:sub_expression1][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_function_call
    if r1
      r0 = r1
    else
      r2 = _nt_function_call_np
      if r2
        r0 = r2
      else
        r3 = _nt_scoped_function_call
        if r3
          r0 = r3
        else
          r4 = _nt_scoped_function_call_np
          if r4
            r0 = r4
          else
            r5 = _nt_primary
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:sub_expression1][start_index] = r0

    r0
  end

  module ExpressionNp0
    def recv
      elements[0]
    end

    def index
      elements[3]
    end

  end

  def _nt_expression_np
    start_index = index
    if node_cache[:expression_np].has_key?(index)
      cached = node_cache[:expression_np][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_aref_recv
    s1 << r2
    if r2
      if has_terminal?('[', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r3 = nil
      end
      s1 << r3
      if r3
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s1 << r4
        if r4
          r6 = _nt_expression
          s1 << r6
          if r6
            r8 = _nt_space
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s1 << r7
            if r7
              if has_terminal?(']', false, index)
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure(']')
                r9 = nil
              end
              s1 << r9
            end
          end
        end
      end
    end
    if s1.last
      r1 = instantiate_node(ArefOperator,input, i1...index, s1)
      r1.extend(ExpressionNp0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r10 = _nt_aref_recv
      if r10
        r0 = r10
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:expression_np][start_index] = r0

    r0
  end

  def _nt_primary
    start_index = index
    if node_cache[:primary].has_key?(index)
      cached = node_cache[:primary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_identifier
    if r1
      r0 = r1
    else
      r2 = _nt_double_quoted_string
      if r2
        r0 = r2
      else
        r3 = _nt_single_quoted_string
        if r3
          r0 = r3
        else
          r4 = _nt_number
          if r4
            r0 = r4
          else
            @index = i0
            r0 = nil
          end
        end
      end
    end

    node_cache[:primary][start_index] = r0

    r0
  end

  def _nt_number
    start_index = index
    if node_cache[:number].has_key?(index)
      cached = node_cache[:number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r1 = true
        @index += 1
      else
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(Number,input, i0...index, s0)
    end

    node_cache[:number][start_index] = r0

    r0
  end

  module DoubleQuotedString0
  end

  module DoubleQuotedString1
    def string
      elements[1]
    end

  end

  def _nt_double_quoted_string
    start_index = index
    if node_cache[:double_quoted_string].has_key?(index)
      cached = node_cache[:double_quoted_string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('"', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('"')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?('"', false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          i6 = index
          if has_terminal?("\\\\", false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("\\\\")
            r7 = nil
          end
          if r7
            r6 = r7
          else
            if has_terminal?('\"', false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure('\"')
              r8 = nil
            end
            if r8
              r6 = r8
            else
              if index < input_length
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r9 = nil
              end
              if r9
                r6 = r9
              else
                @index = i6
                r6 = nil
              end
            end
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(DoubleQuotedString0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?('"', false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('"')
          r10 = nil
        end
        s0 << r10
      end
    end
    if s0.last
      r0 = instantiate_node(QuotedString,input, i0...index, s0)
      r0.extend(DoubleQuotedString1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:double_quoted_string][start_index] = r0

    r0
  end

  module SingleQuotedString0
  end

  module SingleQuotedString1
    def string
      elements[1]
    end

  end

  def _nt_single_quoted_string
    start_index = index
    if node_cache[:single_quoted_string].has_key?(index)
      cached = node_cache[:single_quoted_string][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("'", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("'")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?("'", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          i6 = index
          if has_terminal?("\\\\", false, index)
            r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("\\\\")
            r7 = nil
          end
          if r7
            r6 = r7
          else
            if has_terminal?("\\'", false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
              @index += 2
            else
              terminal_parse_failure("\\'")
              r8 = nil
            end
            if r8
              r6 = r8
            else
              if index < input_length
                r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("any character")
                r9 = nil
              end
              if r9
                r6 = r9
              else
                @index = i6
                r6 = nil
              end
            end
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(SingleQuotedString0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?("'", false, index)
          r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r10 = nil
        end
        s0 << r10
      end
    end
    if s0.last
      r0 = instantiate_node(QuotedString,input, i0...index, s0)
      r0.extend(SingleQuotedString1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:single_quoted_string][start_index] = r0

    r0
  end

  module Keyword0
  end

  def _nt_keyword
    start_index = index
    if node_cache[:keyword].has_key?(index)
      cached = node_cache[:keyword][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('class', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('class')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('def', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 3))
        @index += 3
      else
        terminal_parse_failure('def')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        if has_terminal?('end', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 3))
          @index += 3
        else
          terminal_parse_failure('end')
          r4 = nil
        end
        if r4
          r1 = r4
        else
          @index = i1
          r1 = nil
        end
      end
    end
    s0 << r1
    if r1
      i5 = index
      r6 = _nt_non_space_char
      if r6
        r5 = nil
      else
        @index = i5
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Keyword0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:keyword][start_index] = r0

    r0
  end

  module NonSpaceChar0
  end

  def _nt_non_space_char
    start_index = index
    if node_cache[:non_space_char].has_key?(index)
      cached = node_cache[:non_space_char][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('\G[;\\n ]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if index < input_length
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NonSpaceChar0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:non_space_char][start_index] = r0

    r0
  end

  module Identifier0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_keyword
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if has_terminal?('\G[a-z]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s0 << r3
      if r3
        s4, i4 = [], index
        loop do
          if has_terminal?('\G[A-Za-z0-9_]', true, index)
            r5 = true
            @index += 1
          else
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(Identifier,input, i0...index, s0)
      r0.extend(Identifier0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  module FunctionScope0
    def identifier
      elements[0]
    end

  end

  def _nt_function_scope
    start_index = index
    if node_cache[:function_scope].has_key?(index)
      cached = node_cache[:function_scope][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      if has_terminal?('::', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 2))
        @index += 2
      else
        terminal_parse_failure('::')
        r2 = nil
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(FunctionScope0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_scope][start_index] = r0

    r0
  end

  module ScopedFunctionCall0
    def function_scope
      elements[0]
    end

    def function_call
      elements[1]
    end
  end

  def _nt_scoped_function_call
    start_index = index
    if node_cache[:scoped_function_call].has_key?(index)
      cached = node_cache[:scoped_function_call][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_function_scope
    s0 << r1
    if r1
      r2 = _nt_function_call
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(ScopedFunctionCall,input, i0...index, s0)
      r0.extend(ScopedFunctionCall0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:scoped_function_call][start_index] = r0

    r0
  end

  module FunctionCall0
    def identifier
      elements[0]
    end

    def params
      elements[2]
    end

  end

  def _nt_function_call
    start_index = index
    if node_cache[:function_call].has_key?(index)
      cached = node_cache[:function_call][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      if has_terminal?('(', false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('(')
        r2 = nil
      end
      s0 << r2
      if r2
        r4 = _nt_function_call_params
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          if has_terminal?(')', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(')')
            r5 = nil
          end
          s0 << r5
        end
      end
    end
    if s0.last
      r0 = instantiate_node(FunctionCall,input, i0...index, s0)
      r0.extend(FunctionCall0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_call][start_index] = r0

    r0
  end

  module FunctionCallParams0
    def expression
      elements[3]
    end
  end

  module FunctionCallParams1
    def expression
      elements[0]
    end

    def more
      elements[1]
    end
  end

  def _nt_function_call_params
    start_index = index
    if node_cache[:function_call_params].has_key?(index)
      cached = node_cache[:function_call_params][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_space
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_expression
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(FunctionCallParams0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(CallParams,input, i0...index, s0)
      r0.extend(FunctionCallParams1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_call_params][start_index] = r0

    r0
  end

  module ScopedFunctionCallNp0
    def function_scope
      elements[0]
    end

    def function_call
      elements[1]
    end
  end

  def _nt_scoped_function_call_np
    start_index = index
    if node_cache[:scoped_function_call_np].has_key?(index)
      cached = node_cache[:scoped_function_call_np][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_function_scope
    s0 << r1
    if r1
      r2 = _nt_function_call_np
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(ScopedFunctionCall,input, i0...index, s0)
      r0.extend(ScopedFunctionCallNp0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:scoped_function_call_np][start_index] = r0

    r0
  end

  module FunctionCallNp0
    def identifier
      elements[0]
    end

    def params
      elements[2]
    end
  end

  def _nt_function_call_np
    start_index = index
    if node_cache[:function_call_np].has_key?(index)
      cached = node_cache[:function_call_np][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[\\s\\t]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        r4 = _nt_function_call_np_params
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(FunctionCall,input, i0...index, s0)
      r0.extend(FunctionCallNp0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_call_np][start_index] = r0

    r0
  end

  module FunctionCallNpParams0
    def expression
      elements[3]
    end
  end

  module FunctionCallNpParams1
    def expression
      elements[0]
    end

    def more
      elements[1]
    end
  end

  def _nt_function_call_np_params
    start_index = index
    if node_cache[:function_call_np_params].has_key?(index)
      cached = node_cache[:function_call_np_params][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_expression_np
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r5 = _nt_space
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if has_terminal?(',', false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(',')
            r6 = nil
          end
          s3 << r6
          if r6
            r8 = _nt_space
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s3 << r7
            if r7
              r9 = _nt_expression_np
              s3 << r9
            end
          end
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(FunctionCallNpParams0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(CallParams,input, i0...index, s0)
      r0.extend(FunctionCallNpParams1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:function_call_np_params][start_index] = r0

    r0
  end

  module NonSpaceChar0
  end

  def _nt_non_space_char
    start_index = index
    if node_cache[:non_space_char].has_key?(index)
      cached = node_cache[:non_space_char][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_space
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      if index < input_length
        r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NonSpaceChar0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:non_space_char][start_index] = r0

    r0
  end

  def _nt_alpha_char
    start_index = index
    if node_cache[:alpha_char].has_key?(index)
      cached = node_cache[:alpha_char][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[A-Za-z_]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:alpha_char][start_index] = r0

    r0
  end

  def _nt_alnum
    start_index = index
    if node_cache[:alnum].has_key?(index)
      cached = node_cache[:alnum][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_alpha_char
    if r1
      r0 = r1
    else
      if has_terminal?('\G[0-9]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:alnum][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_white
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

  module CommentToEol0
  end

  module CommentToEol1
  end

  def _nt_comment_to_eol
    start_index = index
    if node_cache[:comment_to_eol].has_key?(index)
      cached = node_cache[:comment_to_eol][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('#', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('#')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        i4 = index
        if has_terminal?("\n", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("\n")
          r5 = nil
        end
        if r5
          r4 = nil
        else
          @index = i4
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s3 << r4
        if r4
          if index < input_length
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("any character")
            r6 = nil
          end
          s3 << r6
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(CommentToEol0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CommentToEol1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comment_to_eol][start_index] = r0

    r0
  end

  def _nt_white
    start_index = index
    if node_cache[:white].has_key?(index)
      cached = node_cache[:white][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[ \\t\\n\\r]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:white][start_index] = r0

    r0
  end

  def _nt_xspace
    start_index = index
    if node_cache[:xspace].has_key?(index)
      cached = node_cache[:xspace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[ \\t]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:xspace][start_index] = r0

    r0
  end

  module StmtEnd0
  end

  def _nt_stmt_end
    start_index = index
    if node_cache[:stmt_end].has_key?(index)
      cached = node_cache[:stmt_end][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      r2 = _nt_xspace
      if r2
        s1 << r2
      else
        break
      end
    end
    r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    s0 << r1
    if r1
      if has_terminal?('\G[;\\n]', true, index)
        r3 = true
        @index += 1
      else
        r3 = nil
      end
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StmtEnd0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:stmt_end][start_index] = r0

    r0
  end

end

class GrammarParser < Treetop::Runtime::CompiledParser
  include Grammar
end


end
