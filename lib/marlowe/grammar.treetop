# vim: filetype=treetop

module Marlowe

grammar Grammar

  rule all
    toplevel+ {
      def declarations
        elements
      end
    }
  end

  rule toplevel
    package / class_start / concept / import / defn_from / alias / from_c
  end

  rule package_name
    start:([A-Za-z] alnum*) rest:('.' part:(alnum+))*
  end

  rule import
    'import' xspace package_name stmt_end white* <ImportDeclaration>
  end

  rule package
    'package' xspace package_name stmt_end white* <PackageDeclaration>
  end

  rule class_start
    'class' xspace class_name _type_params:(type_params?) stmt_end space?
      body:(class_body?) space? 'end' stmt_end white* <ClassDeclaration>
  end

  rule concept
    'concept' xspace class_name _type_params:(type_params?) stmt_end space?
      body:(class_body?) space? 'end' stmt_end white* <ConceptDeclaration>
  end

  rule from_c
    'from' xspace path:double_quoted_string stmt_end space?
      body:(from_body?) space? 'end' stmt_end white* <FromDeclaration>
  end

  rule from_body
    head:from_declaration tail:(space? from_declaration)* {
      def declarations
        [head] + tail
      end

      def tail
        super.elements.map { |elt| elt.from_declaration }
      end
    }
  end

  rule from_declaration
    from_bind
  end

  rule from_bind
    annos:(annotation*)
    'bind' xspace+ name:defn_name as_name:(xspace* '=' xspace* name:defn_name)? stmt_end xspace* <BindMethod>
  end

  rule class_name
    ([A-Z] alnum*)
  end

  rule class_body
    head:declaration tail:(space? declaration)* {
      def declarations
        [head] + tail
      end

      def tail
        super.elements.map { |elt| elt.declaration }
      end
    }
  end

  rule type_params
    '[' xspace* type_param more:(xspace* ',' xspace* type_param)* xspace* ']' <TypeParams>
  end

  rule type_param
    restricted_type / type_name
  end

  rule restricted_type
    class_name xspace* ':' xspace* type_name <RestrictedType>
  end

  rule declaration
    defn_from / defn / type_alias / var_decl / alias
  end

  rule type_alias
    'type' xspace+ type_name xspace* '=' xspace* named_type stmt_end xspace* <TypeAlias>
  end

  rule annotation_const_value
      number
    / double_quoted_string
    / single_quoted_string
  end

  rule annotation_named_value
    identifier xspace* '=' xspace* annotation_const_value <AnnotationNamedValue>
  end

  rule annotation_value
    annotation_named_value / annotation_const_value
  end

  rule annotation_arg_list
    head:annotation_value tail:(white* ',' white* annotation_value)* {
      def annotations
        [head] + tail
      end

      def tail
        super.elements.map { |elt| elt.annotation_value }
      end
    }
  end


  rule annotation_args
    '(' xspace* list:annotation_arg_list xspace* ')'
  end

  rule annotation
    ':' name:([A-Za-z0-9]+) args:(annotation_args?) space <Annotation>
  end

  rule var_decl
    annos:(annotation*)
    'var' xspace+ scoped_identifier xspace* ':' xspace* named_type stmt_end <IVarDecl>
  end

  rule named_type
    type_instantiate
    /
    type_name
  end

  rule type_instantiate
    type_name type_params <TypeInstantiate>
  end

  rule defn
    annos:(annotation*)
    'def' xspace+ single:('self.')? defn_name
       args:(defn_args?) stmt_end space?
       body:(expression_list?) space? 'end' stmt_end xspace* <DefineMethod>
  end

  rule defn_from
    annos:(annotation*)
    'bind' xspace+ single:('self.')? defn_name xspace* '=' xspace*
    'external' xspace name:([A-Za-z0-9]+) args:(defn_args?)
    xspace* ':' xspace* rettype:type_name stmt_end xspace* <BindMethod>
  end

  rule alias
    annos:(annotation*)
    'alias' xspace+ type:type_name xspace* '=' xspace*
            'external' xspace+ exttype:type_name stmt_end xspace* <AliasDeclaration>
  end

  rule defn_name
    [A-Za-z] [A-Za-z0-9_]*
  end

  rule defn_args
    '(' defn_arg_list ')' <Arguments>
  end

  rule defn_arg_list
    head:typed_identifier tail:(white* ',' white* typed_identifier)* {
      def declarations
        [head] + tail
      end

      def tail
        super.elements.map { |elt| elt.typed_identifier }
      end
    }
  end

  rule typed_identifier
    defn_name white* ':' white* type_name <TypedIdentifier>
  end

  rule type_name
    !keyword scope:(identifier '.')* name:([A-Za-z] [A-Za-z0-9_]*) suffix:("*"*) <TypeName>
  end

  rule more_expressions
    stmt_end space? expr_or_decl
  end

  rule expression_list
    expr_or_decl more:more_expressions* {
      def expressions
        [expr_or_decl] + more.elements.map { |x| x.expr_or_decl }
      end
    }
  end

  rule expr_or_decl
    local_var / expression
  end

  rule local_var_type
    ':' xspace* named_type xspace*
  end

  rule local_var
    annos:(annotation*)
    'var' xspace+ identifier xspace* type:(local_var_type?)
       '=' xspace* expression <VarDecl>
  end

  rule expression
    comparison
  end

  rule comparison
    lhs:additive space operator:compare_op space rhs:comparison <ComparisonOperation>
    / additive
  end

  rule compare_op
    "===" / "==" / "=" / ">" / "<"
  end

  rule additive
    lhs:multitive space operator:add_op space rhs:additive <AdditiveOperation>
    /
    multitive
  end

  rule add_op
    "+" / "-"
  end

  rule multitive
    lhs:aref space operator:multitive_op space rhs:multitive <MultitiveOperation>
    /
    aref
  end

  rule multitive_op
    "*" / "/"
  end

  rule aref
    recv:aref_recv '[' space? index:expression space? ']' <ArefOperator>
    /
    sub_expression1
  end

  rule aref_recv
      function_call
    / scoped_function_call
    / method_call
    / method_call_np
    / if
    / while
    / until
    / primary
  end

  rule sub_expression1
      function_call
    / function_call_np
    / scoped_function_call
    / scoped_function_call_np
    / method_call
    / method_call_np_args
    / method_call_np
    / if
    / while
    / until
    / primary
  end

  rule expression_np
    recv:aref_recv '[' space? index:expression space? ']' <ArefOperator>
    /
    aref_recv
  end

  rule primary
      identifier
    / type_name
    / scoped_identifier
    / double_quoted_string
    / single_quoted_string
    / number
  end

  rule scoped_identifier
    "@" identifier <ScopedIdentifier>
  end

  rule number
    [0-9]+ <Number>
  end

  rule double_quoted_string
    '"' string:(!'"' ("\\\\" / '\"' / .))* '"' <QuotedString>
  end

  rule single_quoted_string
    "'" string:(!"'" ("\\\\" / "\\'" / .))* "'" <QuotedString>
  end


  rule keyword
    ('class' / 'def' / 'end' / 'if' / 'else' / 'while' / 'until' / 'var') !non_space_char
  end

  rule non_space_char
    ![;\n ] .
  end

  rule if_else
    'else' space? body:(expression_list?) space?
  end

  rule if
    'if' xspace+ condition:primary stmt_end space? body:(expression_list?) space? else_body:(if_else?) 'end' <If>
  end

  rule while
    'while' xspace+ condition:primary stmt_end space? body:(expression_list?) space? 'end' <While>
  end

  rule until
    'until' xspace+ condition:primary stmt_end space? body:(expression_list?) space? 'end' <Until>
  end

  rule identifier
    !keyword [a-z] [A-Za-z0-9_]* <Identifier>
  end

  rule function_scope
    identifier '::'
  end

  rule scoped_function_call
    function_scope function_call <ScopedFunctionCall>
  end

  rule function_call
    identifier '(' params:(function_call_params?) ')' <FunctionCall>
  end

  rule function_call_params
    expression more:(space? ',' space? expression)* <CallParams>
  end

  rule scoped_function_call_np
    function_scope function_call:function_call_np <ScopedFunctionCall>
  end

  rule function_call_np
    identifier [\s\t]+ params:function_call_np_params <FunctionCall>
  end

  rule function_call_np_params
    expression:expression_np
    more:(space? ',' space? expression:expression_np)* <CallParams>
  end

  rule method_call_apply
    '.' name:identifier '(' arguments:(function_call_params?) ')'
  end

  rule method_call
    recv:primary apply:method_call_apply chaining:(method_call_apply*) <MethodCall>
  end

  rule method_call_apply_np
    '.' name:identifier
  end

  rule method_call_np
    recv:primary apply:method_call_apply_np chaining:(method_call_apply_np*) <MethodCallNoParen>
  end

  rule method_call_np_args_recv
    primary / method_call_np
  end

  rule method_call_np_args
    recv:primary apply:method_call_apply_np chaining:(method_call_apply_np*) xspace+ arguments:function_call_np_params <MethodCallNPArgs>
  end

  rule non_space_char
    !space .
  end

  rule alpha_char
    [A-Za-z_]
  end

  rule alnum
    alpha_char / [0-9]
  end

  rule space
    white+
    # (white / comment_to_eol)+
  end

  rule comment_to_eol
    '#' (!"\n" .)*
  end

  rule white
    [ \t\n\r]
  end

  rule xspace
    [ \t]
  end

  rule stmt_end
    xspace* [;\n]
  end
end

end
